{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    http;\n    apiPath = `${environment.backendUrl}/api/auth`;\n    currentUserSubject = new BehaviorSubject(null);\n    authStatusSubject = new BehaviorSubject(false);\n    currentUser$ = this.currentUserSubject.asObservable();\n    isAuthenticated$ = this.authStatusSubject.asObservable();\n    get isLoggedIn() {\n      return this.authStatusSubject.value;\n    }\n    constructor(http) {\n      this.http = http;\n      this.initializeAuthState();\n    }\n    initializeAuthState() {\n      this.getCurrentUser().subscribe({\n        next: response => {\n          this.currentUserSubject.next(response.data);\n          this.authStatusSubject.next(true);\n        },\n        error: () => this.clearSession()\n      });\n    }\n    register(payload) {\n      return this.http.post(`${this.apiPath}/register`, payload, {\n        withCredentials: true\n      }).pipe(tap(response => this.handleAuthSuccess(response.data)));\n    }\n    // auth.service.ts\n    // Login\n    login(payload) {\n      return this.http.post(`${this.apiPath}/login`, payload, {\n        withCredentials: true\n      }).pipe(tap(response => {\n        // Now response.data is { id, fullname, ... } directly\n        this.handleAuthSuccess(response.data);\n      }));\n    }\n    logout() {\n      return this.http.post(`${this.apiPath}/logout`, {}, {\n        withCredentials: true\n      }).pipe(tap(() => this.clearSession()));\n    }\n    deleteAccount() {\n      return this.http.delete(`${this.apiPath}/delete`, {\n        withCredentials: true\n      }).pipe(tap(() => this.clearSession()));\n    }\n    getCurrentUser() {\n      return this.http.get(`${this.apiPath}/me`, {\n        withCredentials: true\n      });\n    }\n    handleAuthSuccess(user) {\n      // user is now { id, fullname, email, profileImageUrl }\n      this.currentUserSubject.next(user);\n      this.authStatusSubject.next(true);\n    }\n    clearSession() {\n      this.currentUserSubject.next(null);\n      this.authStatusSubject.next(false);\n    }\n    static ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}