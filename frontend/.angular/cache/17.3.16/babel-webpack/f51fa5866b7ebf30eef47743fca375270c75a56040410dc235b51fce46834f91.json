{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let NotificationService = /*#__PURE__*/(() => {\n  class NotificationService {\n    notificationsSubject = new BehaviorSubject([]);\n    notifications$ = this.notificationsSubject.asObservable();\n    counter = 0;\n    showNotification(type, message, autoClose = true, duration = 3000) {\n      this.counter++;\n      const newNotification = {\n        id: this.counter,\n        type,\n        message,\n        autoClose,\n        duration\n      };\n      // Add the new notification at the beginning or end as per your design\n      const current = this.notificationsSubject.getValue();\n      this.notificationsSubject.next([...current, newNotification]);\n      if (autoClose) {\n        setTimeout(() => {\n          this.removeNotification(newNotification.id);\n        }, duration);\n      }\n    }\n    removeNotification(id) {\n      const updated = this.notificationsSubject.getValue().filter(n => n.id !== id);\n      this.notificationsSubject.next(updated);\n    }\n    clearAll() {\n      this.notificationsSubject.next([]);\n    }\n    static ɵfac = function NotificationService_Factory(t) {\n      return new (t || NotificationService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NotificationService,\n      factory: NotificationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return NotificationService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}